#!/usr/bin/env python3
import sys
from z3 import *

"""
-----------
00 01 02 03
10 11 12 13
20 21 22 23
30 31 32 33
-----------
"""

LENGTH=4
board=[]
boxes=[]
s = Solver()

# represents a box of cells w/ a given total sum
class Box:
     def __init__(self, cells, sum):
         self.cells = cells
         self.sum = sum

# init board
for r in range(LENGTH):
    board.append([])
    #initialize squares as z3 Int types
    for c in range(LENGTH):
        board[r].append(Int('{}{}'.format(r,c)))            #every item is an integer
        s.add(And(board[r][c] > 0, board[r][c] <= LENGTH))  #every item is > 0 and <= length

for r in range(LENGTH):
    d = Distinct([board[r][c] for c in range(LENGTH)])      #every item in a row is distinct
    dc = Distinct([board[c][r] for c in range(LENGTH)])     #every item in a column is distinct
    s.add(d)
    s.add(dc)

# setup sum boxes
box = Box([[0,0], [1,0], [1,1]], 6)
boxes.append(box)
#s.add(board[0][0] + board[1][0] + board[1][1] == 6)

box = Box([[0,1], [0,2]], 7)
boxes.append(box)
#s.add(board[0][1] + board[0][2] == 7)

box = Box([[0,3], [1,3]], 5)
boxes.append(box)
#s.add(board[0][3] + board[1][3] == 5)

box = Box([[1,2], [2,2]], 6)
boxes.append(box)
#s.add(board[1][2] + board[2][2] == 6)

box = Box([[2,0], [3,0]], 7)
boxes.append(box)
#s.add(board[2][0] + board[3][0] == 7)

box = Box([[2,1], [3,1]], 3)
boxes.append(box)
#s.add(board[2][1] + board[3][1] == 3)

box = Box([[2,3], [3, 2], [3,3]], 6)
boxes.append(box)
#s.add(board[2][3] + board[3][2] + board[3][3] == 6)


def sumBoxes():
    for b in boxes:
        s.add(Sum([b.cells[c] for c in range(len(b.cells))]) == boxes[0].sum)

#print(board)
#print(boxes)

#for some reason if just one rule is taken out, this example becomes sat

sat = s.check()         #checks for satisfiability
if sat == z3.sat:
    print(s.model())    #prints model if sat
else:
    print(sat)          #prints sat value if unsat
